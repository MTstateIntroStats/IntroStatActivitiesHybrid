as_extreme_as = 0.082,
add_normal = FALSE,
direction = "greater")
set.seed()
set.seed(216)
two_proportion_bootstrap_CI(formula = KI67_level ~ Patients_group,
data = allopurinol,
first_in_subtraction = "Allopurinol",
response_value_numerator = "Reduced KI-67 level",
number_repetitions = 1000,
confidence_level = 0.95)
set.seed(216)
two_proportion_bootstrap_CI(formula = KI67_level ~ Patients_group,
data = allopurinol,
first_in_subtraction = "Allopurinol",
response_value_numerator = "Reduced KI-67 level",
number_repetitions = 1000,
confidence_level = 0.99)
Facebook <- c(rep("Yes",174),rep("No",132))
GenZ <- as.data.frame(Facebook)
#Count
GenZ %>% count(Facebook)
#Plot
GenZ %>%
ggplot(aes(x = Facebook)) +
geom_bar(aes(y = after_stat(prop), group = 1)) +
labs(title = "Bar Plot of GenZ Facebook Use",
y = "Relative Frequency")
#NHT
set.seed(216)
one_proportion_test(probability_success = 0.67,
sample_size = 306,
number_repetitions = 1000,
as_extreme_as = 0.57,
direction = "less",
summary_measure = "proportion")
#95% CI
one_proportion_bootstrap_CI(
sample_size = 306,
number_successes = 174,
number_repetitions = 1000,
confidence_level = 0.95
)
set.seed(216)
two_proportion_test(formula = BMI_5th~Vaccination,
data = df,
first_in_subtraction = "Fully_vaccinated",
number_repetitions = 1000,
response_value_numerator = "below",
as_extreme_as = -0.1,
direction="less")
set.seed(216)
two_proportion_bootstrap_CI(formula = BMI_5th~Vaccination,
data=df,
first_in_subtraction = "Fully_vaccinated",
response_value_numerator = "below",
number_repetitions = 1000,
confidence_level = 0.95)
set.seed(216)
two_proportion_bootstrap_CI(formula = BMI_5th~Vaccination,
data=df,
first_in_subtraction = "Fully_vaccinated",
response_value_numerator = "below",
number_repetitions = 1000,
confidence_level = 0.98)
invasion <- c(rep("yes", 13), rep("no", 20))
mice <- as.data.frame(invasion)
mice <- mice %>%
mutate(dox = "no")
invasion <- c(rep("yes", 23), rep("no", 10))
invasion <- as.data.frame(invasion)
invasion <- invasion %>%
mutate(dox = 'yes')
mice <- rbind(mice, invasion)
mice %>%
ggplot(aes(x = dox, fill = invasion)) +
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented Bar Plot Of Muscle Invasion by Dox",
x = "Dox",
y = "Relative Frequency") +
labs(fill = "Muscle Invasion")
mice %>%
ggplot(aes(x = dox, fill = invasion)) +
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented Bar Plot Of Muscle Invasion by Dox in Mice",
x = "Dox",
y = "Relative Frequency") +
labs(fill = "Muscle Invasion") +
scale_fill_grey() +
theme_bw()
mice %>% group_by(dox) %>% count(invasion)
set.seed(216)
two_proportion_test(
formula = invasion ~ dox,
data = mice,
first_in_subtraction = "yes",
number_repetitions = 1000,
response_value_numerator = "yes",
as_extreme_as = 0.3030,
add_normal = FALSE,
direction = "greater"
)
set.seed(216)
two_proportion_bootstrap_CI(
formula = invasion ~ dox,
data = mice,
first_in_subtraction = "yes",
response_value_numerator = "yes",
number_repetitions = 1000,
confidence_level = 0.95
)
install.packages("remotes")
remotes::install_github("greenwood-stat/catstats2")
install.packages('easyalluvial')
install.packages("devtools")
require(devtools)
devtools::install_github("erblast/easyalluvial")
remotes::install_github("greenwood-stat/catstats2")
PrEP_data <- read.csv("C:/Users/melin/Downloads/PrEP_data.csv")
View(PrEP_data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(catstats)
library(mosaic)
PrEP <- "PrEP_data.csv"
PrEP <- PrEP[!grepl("N/A", PrEP$barriers),]
PrEP <- read.csv("PrEP_data.csv")
PrEP <- PrEP[!grepl("N/A", PrEP$barriers),]
PrEP <- filter(PrEP, specialty %in% c(0,1), Qualification %in% c(0,1,2), prescribed_prep >= 0)
PrEP$specialty <- as.factor(ifelse(PrEP$specialty == 0, "Infectious diseases", "Internal medicine"))
PrEP$prescribed_prep <- as.factor(ifelse(PrEP$prescribed_prep == 1, "Yes", "No"))
set.seed(252)
spec_prescrib_tab <- table(PrEP$specialty, PrEP$prescribed_prep)
spec_prescrib_tab
two_proportion_test(formula = prescribed_prep ~ specialty, data = PrEP, response_value_numerator = "Yes",
first_in_subtraction =  "Infectious diseases", as_extreme_as = -0.09844722, direction = "less",
number_repetitions =  1000, F)
# I'm not sure why the CI is not centered at the difference
prop.test(x = c(102, 74), n = c(191, 117), alternative = "less", conf.level = 0.95)
two_proportion_bootstrap_CI(formula = prescribed_prep ~ specialty, PrEP, first_in_subtraction = "Infectious diseases",
response_value_numerator = "Yes", confidence_level = 0.95, number_repetitions = 1000)
PrEP %>%
ggplot(aes(x = specialty, fill = prescribed_prep)) +
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented Bar Plot of Specialty of Practicioner\nby Experience Prescribing Prep",
x = "Specialty of Practicioner",
y = "") +
scale_fill_grey()
Trail_Weight <- read.csv("C:/Users/Melinda Yager/OneDrive - Montana State University/Repositories/IntroStatActivitiesHybrid/data/Trail_Weight.csv")
View(Trail_Weight)
library(tidyverse)
library(catstats)
library(ggplot2)
library(mosaic)
#For questions 4 & 5
#Enter the name of the dataset for datasetname in line 10
#Enter a title in line 14 for the plot between the quotations
#Highlight and run lines 1 - 16
hikes <- Trail_Weight
#To practice using simulation methods for independent groups
#To create the null distribution
#Enter the missing values/names for the xx's
#Highlight and run lines 40 - 45
two_mean_test(Baseweight~Trail, #Enter the names of the variables
data = hikes,  # Enter the name of the dataset
first_in_subtraction = "CDT", # First outcome in order of subtraction
number_repetitions = 1000,  # Number of simulations
as_extreme_as = -2.571,  # Observed statistic
direction = "two-sided")  # Direction of alternative: "greater", "less", or "two-sided"
#To create the bootstrap distribution
#Enter the missing values/names for the xx's
#Highlight and run lines 50 - 54
two_mean_bootstrap_CI(Baseweight~Trail, #Enter the name of the variables
data = hikes,  # Enter the name of the data set
first_in_subtraction = "CDT", # First value in order of subtraction
number_repetitions = 1000,  # Number of simulations
confidence_level = 0.95)
qt(0.975,df=98)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
options(show.signif.stars = FALSE)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(car)
library(effects)
library(janitor)
library(readxl)
library(catstats2)
library(mosaic)
theme_set(theme_bw())
# Choose mean and standard deviation
mean_val <- 0
sd_val <- 1
# Create a data frame for plotting
plot_data <- data.frame(x = seq(mean_val - 5 * sd_val, mean_val + 5 * sd_val, length.out = 1000))
plot_data1 <- data.frame(x = seq(mean_val - 1 * sd_val, mean_val + 1 * sd_val, length.out = 1000))
plot_data2 <- data.frame(x = seq(mean_val - 2 * sd_val, mean_val + 2 * sd_val, length.out = 1000))
plot_data3 <- data.frame(x = seq(mean_val - 3 * sd_val, mean_val + 3 * sd_val, length.out = 1000))
# Calculate the normal distribution values
plot_data$y <- dnorm(plot_data$x, mean = mean_val, sd = sd_val)
plot_data1$y <- dnorm(plot_data1$x, mean = mean_val, sd = sd_val)
plot_data2$y <- dnorm(plot_data2$x, mean = mean_val, sd = sd_val)
plot_data3$y <- dnorm(plot_data3$x, mean = mean_val, sd = sd_val)
# Create the ggplot
percs <- c(0.1, 2.1, 13.6, 34.1, 34.1, 13.6, 2.1, 0.1)
p1 <- ggplot(plot_data, aes(x = x, y = y)) +
geom_vline(xintercept = -3:3, col = "darkgrey", alpha = 0.9, size = 0.5) +
geom_line(color = "blue", size = 1) +  # Plot the normal distribution curve
geom_hline(color = "blue", yintercept = 0, size = 1) +
geom_ribbon(data = plot_data, aes(x = x, ymax = y, ymin = 0), fill = "black", alpha = 1) +
geom_ribbon(data = plot_data3, aes(x = x, ymax = y, ymin = 0), fill = "blue", alpha = 1) +
geom_ribbon(data = plot_data2, aes(x = x, ymax = y, ymin = 0), fill = "skyblue", alpha = 1) +  # Add shaded region for 95%
geom_ribbon(data = plot_data1, aes(x = x, ymax = y, ymin = 0), fill = "lightblue", alpha = 1) +
theme(axis.ticks.x = element_blank()) +
scale_x_continuous(breaks = -5:5) +
theme(axis.ticks.x = element_blank()) +
labs(title = "Standard Normal Distribution",
x = "",
y = "Probability Density") +
annotate("text", x = 0, y = -0.01, label = "mu", parse = T, color = "blue") +
annotate("text", x = 1, y = -0.01, label = "+1~sigma", parse = T, color = "blue") +
annotate("text", x = -1, y = -0.01, label = "-1~sigma", parse = T, color = "blue") +
annotate("text", x = 2, y = -0.01, label = "+2~sigma", parse = T, color = "blue") +
annotate("text", x = -2, y = -0.01, label = "-2~sigma",
parse = T, color = "blue") +
annotate("text", x = 3, y = -0.01, label = "+3~sigma", parse = T, color = "blue") +
annotate("text", x = -3, y = -0.01, label = "-3~sigma",
parse = T, color = "blue") +
annotate("text", x = 4, y = .5, label = paste0("mu", "==0"), parse = T) +
annotate("text", x = 4, y = .48, label = paste0("sigma", "==1"), parse = T) +
annotate("text", x = -3.5:3.5, y = 0.05, label = paste0(percs,"%")) +
geom_segment(aes(x = 0, xend = 0, y = 0, yend = dnorm(0))) +
geom_segment(aes(x = .35, xend = 1, y = .41, yend = 0.41), col = "orange", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.41, label = paste0(68.2,"%"), col = "orange") +
geom_segment(aes(x = -.35, xend = -1, y = .41, yend = 0.41), col = "orange", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
geom_segment(aes(x = .35, xend = 2, y = .45, yend = 0.45), col = "red", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.45, label = paste0(95.4,"%"), col = "red") +
geom_segment(aes(x = -.35, xend = -2, y = .45, yend = 0.45), col = "red", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
geom_segment(aes(x = .35, xend = 3, y = .49, yend = 0.49), col = "darkred", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.49, label = paste0(99.7,"%"), col = "darkred") +
geom_segment(aes(x = -.35, xend = -3, y = .49, yend = 0.49), col = "darkred", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
theme_bw()
p1
# Choose mean and standard deviation
mean_val <- 0
sd_val <- 1
# Create a data frame for plotting
plot_data <- data.frame(x = seq(mean_val - 5 * sd_val, mean_val + 5 * sd_val, length.out = 1000))
plot_data1 <- data.frame(x = seq(mean_val - 1 * sd_val, mean_val + 1 * sd_val, length.out = 1000))
plot_data2 <- data.frame(x = seq(mean_val - 2 * sd_val, mean_val + 2 * sd_val, length.out = 1000))
plot_data3 <- data.frame(x = seq(mean_val - 3 * sd_val, mean_val + 3 * sd_val, length.out = 1000))
# Calculate the normal distribution values
plot_data$y <- dnorm(plot_data$x, mean = mean_val, sd = sd_val)
plot_data1$y <- dnorm(plot_data1$x, mean = mean_val, sd = sd_val)
plot_data2$y <- dnorm(plot_data2$x, mean = mean_val, sd = sd_val)
plot_data3$y <- dnorm(plot_data3$x, mean = mean_val, sd = sd_val)
# Create the ggplot
percs <- c(0.1, 2.1, 13.6, 34.1, 34.1, 13.6, 2.1, 0.1)
p1 <- ggplot(plot_data, aes(x = x, y = y)) +
geom_vline(xintercept = -3:3, col = "darkgrey", alpha = 0.9, size = 0.5) +
geom_line(color = "blue", size = 1) +  # Plot the normal distribution curve
geom_hline(color = "blue", yintercept = 0, size = 1) +
geom_ribbon(data = plot_data, aes(x = x, ymax = y, ymin = 0), fill = "black", alpha = 1) +
geom_ribbon(data = plot_data3, aes(x = x, ymax = y, ymin = 0), fill = "blue", alpha = 1) +
geom_ribbon(data = plot_data2, aes(x = x, ymax = y, ymin = 0), fill = "skyblue", alpha = 1) +  # Add shaded region for 95%
geom_ribbon(data = plot_data1, aes(x = x, ymax = y, ymin = 0), fill = "lightblue", alpha = 1) +
theme(axis.ticks.x = element_blank()) +
scale_x_continuous(breaks = -5:5) +
theme(axis.ticks.x = element_blank()) +
labs(title = "Standard Normal Distribution",
x = "",
y = "Probability Density") +
annotate("text", x = 0, y = -0.01, label = "mu", parse = T, color = "blue") +
annotate("text", x = 1, y = -0.01, label = "+1~sigma", parse = T, color = "blue") +
annotate("text", x = -1, y = -0.01, label = "-1~sigma", parse = T, color = "blue") +
annotate("text", x = 2, y = -0.01, label = "+2~sigma", parse = T, color = "blue") +
annotate("text", x = -2, y = -0.01, label = "-2~sigma",
parse = T, color = "blue") +
annotate("text", x = 3, y = -0.01, label = "+3~sigma", parse = T, color = "blue") +
annotate("text", x = -3, y = -0.01, label = "-3~sigma",
parse = T, color = "blue") +
annotate("text", x = 4, y = .5, label = paste0("mu", "==0"), parse = T) +
annotate("text", x = 4, y = .48, label = paste0("sigma", "==1"), parse = T) +
annotate("text", x = -3.5:3.5, y = 0.05, label = paste0(percs,"%")) +
geom_segment(aes(x = 0, xend = 0, y = 0, yend = dnorm(0))) +
geom_segment(aes(x = .35, xend = 1, y = .41, yend = 0.41), col = "orange", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.41, label = paste0(68.2,"%"), col = "orange") +
geom_segment(aes(x = -.35, xend = -1, y = .41, yend = 0.41), col = "orange", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
geom_segment(aes(x = .35, xend = 2, y = .45, yend = 0.45), col = "red", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.45, label = paste0(95.4,"%"), col = "red") +
geom_segment(aes(x = -.35, xend = -2, y = .45, yend = 0.45), col = "red", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
geom_segment(aes(x = .35, xend = 3, y = .49, yend = 0.49), col = "darkred", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.49, label = paste0(99.7,"%"), col = "darkred") +
geom_segment(aes(x = -.35, xend = -3, y = .49, yend = 0.49), col = "darkred", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
theme_set(theme_bw())
p1
include_graphics("images/Empirical_Rule_Mark.png")
# Choose mean and standard deviation
mean_val <- 0
sd_val <- 1
# Create a data frame for plotting
plot_data <- data.frame(x = seq(mean_val - 5 * sd_val, mean_val + 5 * sd_val, length.out = 1000))
plot_data1 <- data.frame(x = seq(mean_val - 1 * sd_val, mean_val + 1 * sd_val, length.out = 1000))
plot_data2 <- data.frame(x = seq(mean_val - 2 * sd_val, mean_val + 2 * sd_val, length.out = 1000))
plot_data3 <- data.frame(x = seq(mean_val - 3 * sd_val, mean_val + 3 * sd_val, length.out = 1000))
# Calculate the normal distribution values
plot_data$y <- dnorm(plot_data$x, mean = mean_val, sd = sd_val)
plot_data1$y <- dnorm(plot_data1$x, mean = mean_val, sd = sd_val)
plot_data2$y <- dnorm(plot_data2$x, mean = mean_val, sd = sd_val)
plot_data3$y <- dnorm(plot_data3$x, mean = mean_val, sd = sd_val)
# Create the ggplot
percs <- c(0.1, 2.1, 13.6, 34.1, 34.1, 13.6, 2.1, 0.1)
p1 <- ggplot(plot_data, aes(x = x, y = y)) +
geom_vline(xintercept = -3:3, col = "darkgrey", alpha = 0.9, size = 0.5) +
geom_line(color = "blue", size = 1) +  # Plot the normal distribution curve
geom_hline(color = "blue", yintercept = 0, size = 1) +
geom_ribbon(data = plot_data, aes(x = x, ymax = y, ymin = 0), fill = "black", alpha = 1) +
geom_ribbon(data = plot_data3, aes(x = x, ymax = y, ymin = 0), fill = "blue", alpha = 1) +
geom_ribbon(data = plot_data2, aes(x = x, ymax = y, ymin = 0), fill = "skyblue", alpha = 1) +  # Add shaded region for 95%
geom_ribbon(data = plot_data1, aes(x = x, ymax = y, ymin = 0), fill = "lightblue", alpha = 1) +
theme(axis.ticks.x = element_blank()) +
scale_x_continuous(breaks = -5:5) +
theme(axis.ticks.x = element_blank()) +
labs(title = "Standard Normal Distribution",
x = "",
y = "Probability Density") +
annotate("text", x = 0, y = -0.01, label = "mu", parse = T, color = "blue") +
annotate("text", x = 1, y = -0.01, label = "+1~sigma", parse = T, color = "blue") +
annotate("text", x = -1, y = -0.01, label = "-1~sigma", parse = T, color = "blue") +
annotate("text", x = 2, y = -0.01, label = "+2~sigma", parse = T, color = "blue") +
annotate("text", x = -2, y = -0.01, label = "-2~sigma",
parse = T, color = "blue") +
annotate("text", x = 3, y = -0.01, label = "+3~sigma", parse = T, color = "blue") +
annotate("text", x = -3, y = -0.01, label = "-3~sigma",
parse = T, color = "blue") +
annotate("text", x = 4, y = .5, label = paste0("mu", "==0"), parse = T) +
annotate("text", x = 4, y = .48, label = paste0("sigma", "==1"), parse = T) +
annotate("text", x = -3.5:3.5, y = 0.05, label = paste0(percs,"%")) +
geom_segment(aes(x = 0, xend = 0, y = 0, yend = dnorm(0))) +
geom_segment(aes(x = .35, xend = 1, y = .41, yend = 0.41), col = "black", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.41, label = paste0(68.2,"%"), col = "black") +
geom_segment(aes(x = -.35, xend = -1, y = .41, yend = 0.41), col = "black", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
geom_segment(aes(x = .35, xend = 2, y = .45, yend = 0.45), col = "black", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.45, label = paste0(95.4,"%"), col = "black") +
geom_segment(aes(x = -.35, xend = -2, y = .45, yend = 0.45), col = "black", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
geom_segment(aes(x = .35, xend = 3, y = .49, yend = 0.49), col = "darkred", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
annotate("text", x = 0 , y = 0.49, label = paste0(99.7,"%"), col = "darkred") +
geom_segment(aes(x = -.35, xend = -3, y = .49, yend = 0.49), col = "darkred", size = 1, arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open")) +
theme_set(theme_bw())
p1
big_mac_adjusted_index_22 <- read.csv("C:/Users/Melinda Yager/OneDrive - Montana State University/Repositories/IntroStatActivitiesHybrid/data/big_mac_adjusted_index_22.csv")
View(big_mac_adjusted_index_22)
library(catstats)
library(ggplot2)
library(mosaic)
#To load data
#Enter the name of the dataset for datasetname in line 9
#Highlight and run lines 1 - 9
mac <- big_mac_adjusted_index_22
#For questions 1 - 3
#Highlight and run line 13 - 16
mac %>%
select(c("GDP_dollar", "dollar_price")) %>%
cor(use="pairwise.complete.obs") %>%
round(3)
#For question 5
#Scatterplot
mac %>% # Pipe data set into...
ggplot(aes(x = dollar_price, y = GDP_dollar))+  # Specify variables
geom_point() +  # Add scatterplot of points
labs(x = "Big Mac Cost",  # Label x-axis
y = "GDP",  # Label y-axis
title = "Scatterplot of Big Mac Cost vs. GDP per person for Countries") +  # Be sure to tile your plots
geom_smooth(method = "lm", se = FALSE)  # Add regression line
#For question 5
#Scatterplot
mac %>% # Pipe data set into...
mac %>% # Pipe data set into...
ggplot(aes(x = dollar_price, y = log(GDP_dollar))+  # Specify variables
geom_point() +  # Add scatterplot of points
labs(x = "Big Mac Cost",  # Label x-axis
y = "GDP",  # Label y-axis
title = "Scatterplot of Big Mac Cost vs. GDP per person for Countries") +  # Be sure to tile your plots
geom_smooth(method = "lm", se = FALSE)  # Add regression line
mac %>% # Pipe data set into...
mac %>% # Pipe data set into...
ggplot(aes(x = dollar_price, y = log(GDP_dollar)))+  # Specify variables
geom_point() +  # Add scatterplot of points
labs(x = "Big Mac Cost",  # Label x-axis
y = "GDP",  # Label y-axis
title = "Scatterplot of Big Mac Cost vs. GDP per person for Countries") +  # Be sure to tile your plots
geom_smooth(method = "lm", se = FALSE)  # Add regression line
bigmacLM <- lm(log(GDP_dollar)~dollar_price, data = mac) # Fit linear regression model
par(mfrow=c(1,2)) # Set graphics parameters to plot 2 plots in 1 row
plot(bigmacLM, which=1) # Residual vs fitted values
hist(bigmacLM$resid, xlab="Residuals", ylab="Frequency",
main = "Histogram of Residuals") # Histogram of residuals
par(mfrow=c(1,1))
regression_test(log(GDP_dollar)~dollar_price, # response ~ explanatory
data = mac, # Name of data set
direction = "xx", # Sign in alternative ("greater", "less", "two-sided")
summary_measure  = "xx", # "slope" or "correlation"
as_extreme_as = xx, # Observed slope or correlation
number_repetitions = 1000) # Number of simulated samples for null distribution
#Highlight and run lines 22 - 23
bigmacLM <- lm(log(GDP_dollar)~dollar_price, data=mac)
summary(bigmacLM)$coefficients # Display coefficient summary
par(mfrow=c(1,1))
regression_test(log(GDP_dollar)~dollar_price, # response ~ explanatory
data = mac, # Name of data set
direction = "greater", # Sign in alternative ("greater", "less", "two-sided")
summary_measure  = "slope", # "slope" or "correlation"
as_extreme_as = 0.626, # Observed slope or correlation
number_repetitions = 1000) # Number of simulated samples for null distribution
big_mac_adjusted_index_22 <- read.csv("C:/Users/Melinda Yager/OneDrive - Montana State University/Repositories/IntroStatActivitiesHybrid/data/big_mac_adjusted_index_22.csv")
View(big_mac_adjusted_index_22)
#To load data
#Enter the name of the dataset for datasetname in line 9
#Highlight and run lines 1 - 9
mac <- big_mac_adjusted_index_22
#To load data
#Enter the name of the dataset for datasetname in line 9
#Highlight and run lines 1 - 9
mac <- big_mac_adjusted_index_22
#For questions 1 - 3
#Highlight and run line 13 - 16
mac %>%
select(c("log_GDP", "dollar_price", "local_price")) %>%
cor(use="pairwise.complete.obs") %>%
round(3)
bigmacLM <- lm(log_GDP~dollar_price, data=mac)
summary(bigmacLM)$coefficients # Display coefficient summary
regression_test(log_GDP~dollar_price, # response ~ explanatory
data = mac, # Name of data set
direction = "greater", # Sign in alternative ("greater", "less", "two-sided")
summary_measure  = "slope", # "slope" or "correlation"
as_extreme_as = 0.272, # Observed slope or correlation
number_repetitions = 1000) # Number of simulated samples for null distribution
bigmacLM <- lm(log_GDP~dollar_price, data = mac) # Fit linear regression model
par(mfrow=c(1,2)) # Set graphics parameters to plot 2 plots in 1 row
plot(bigmacLM, which=1) # Residual vs fitted values
hist(bigmacLM$resid, xlab="Residuals", ylab="Frequency",
main = "Histogram of Residuals") # Histogram of residuals
#For question 5
#Scatterplot
mac %>% # Pipe data set into...
ggplot(aes(x = dollar_price, y = log_GDP))+  # Specify variables
geom_point() +  # Add scatterplot of points
labs(x = "Big Mac Cost",  # Label x-axis
y = "GDP",  # Label y-axis
title = "Scatterplot of Big Mac Cost vs. GDP per person for Countries") +  # Be sure to tile your plots
geom_smooth(method = "lm", se = FALSE)  # Add regression line
words <- read.csv("data/Activity2AWordLength_Section004_Sp23.csv") %>%
na.omit()
library(mosaic)
library(tidyverse)
words <- read.csv("data/Activity2AWordLength_Section004_Sp23.csv") %>%
na.omit()
words %>%
summarise(favstats(Letters))
words%>%
ggplot(aes(x = Letters))+
geom_dotplot()+
labs(title = "Sampling Distribution of Average Word Length",
x = "Average word length",
y = "Frequency")
words<-data.frame(c(3.7, 4.6, 4, 3.9, 3.7, 4.7, 4.9, 4.5, 3.6, 3.5, 3.9, 3.6, 3.1, 4.2, 3.9, 5.1,
3.1, 3.8, 4, 3.2, 5.1, 3.5, 4.9, 3.9, 4.6, 3.5, 3.5, 4.3, 4.1, 5, 3.7, 3.8,
3.7, 3.6, 3.2, 4.1, 4.4, 4.5, 3.0, 3.7, 3.7, 4.1, 4.3, 3.9, 3.1, 3.1, 4.4, 3.2,
4.5, 2.5, 3.7, 4.5, 3.8, 3.3, 3.6, 4.3, 2.9, 3.6, 4.2, 2.8, 5.5, 4.6, 5.3, 4.9, 3.9,
3.8, 3.8, 4.2, 4.3, 2.5, 3.1, 3.5, 3.7, 3.3, 5.7, 4.2, 3.3, 3.2, 2.8, 5.2, 4.1, 4.5))
colnames(words)<-c("letters")
words%>%
ggplot(aes(x = letters))+
geom_dotplot()+
labs(title = "Sampling Distribution of Average Word Length",
x = "Average word length",
y = "Frequency") +
theme_bw()
words %>%
summarise(favstats(letters))
words <- read.csv("data/Activity2AWordLength_Section004_Sp23.csv") %>%
na.omit()
words %>%
summarise(favstats(Letters))
words%>%
ggplot(aes(x = Letters))+
geom_dotplot()+
labs(title = "Sampling Distribution of Average Word Length",
x = "Average word length",
y = "Frequency") +
theme_bw()
