moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Over30", "Under30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey() # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Under30", "Over30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Under30", "Over30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Under30", "Over30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = FALSE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Under30", "Over30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin, Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving %>%
ggplot(aes(x = Age))+
geom_dotplot(color="navy", fill = "white") +
labs(title = "Dotplot of Age",
x = "Age",
y = "Proportion")
moving %>%
ggplot(aes(x = Age))+
geom_dotplot() +
labs(title = "Dotplot of Age of Buyers",
x = "Age",
y = "Proportion")
moving %>%
ggplot(aes(x = Age))+
geom_histogram() +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram() +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_boxplot() +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
favstats(Age)
moving %>%
favstats(Age)
favstats(moving$Age)
discrim <- read.cs {"https://waf.cs.illinois.edu/discovery/berkeley.csv"}
discrim <- read.csv {"https://waf.cs.illinois.edu/discovery/berkeley.csv"}
discrim <- read.csv ("https://waf.cs.illinois.edu/discovery/berkeley.csv")
discrim %>%
ggplot(aes(x =Sex, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim <- read.csv ("https://waf.cs.illinois.edu/discovery/berkeley.csv")
discrim %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.A < - discrim %>%
factor(Major == A)
discrim.A < - discrim %>%
factor(Major == "A")
discrim.A < - discrim %>%
select(Major == "A")
discrim.A < - discrim %>%
filter(Major == "A")
discrim.A < - discrim %>%
filter(Major == "A")
load.data <- read.csv("CookedChicken.csv")
CookedChicken <- read.csv("C:/Users/melin/Montana State University/Stat 216 Spring 2023 - Exams - Documents/Exams/Exam1_Data_RFiles/CookedChicken.csv", header=FALSE)
View(CookedChicken)
CookedChicken <- read.csv("C:/Users/melin/Montana State University/Stat 216 Spring 2023 - Exams - Documents/Exams/Exam1_Data_RFiles/CookedChicken.csv")
View(CookedChicken)
load.data <- CookedChicken.csv
chix <- load.data[,c(2, 20)] %>%
rename(CookMethod = "Type.de.poulet", HAA = "X") %>%
filter(HAA < 75)
load.data <- CookedChicken
chix <- load.data[,c(2, 20)] %>%
rename(CookMethod = "Type.de.poulet", HAA = "X") %>%
filter(HAA < 75)
chixs <- chix %>%
filter(CookMethod == "Flamed chicken")
discrim.A < - discrim %>%
filter(Major == "A")
discrim.A <- discrim %>%
filter(Major == "A")
discrim.A %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program A",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.B <- discrim %>%
filter(Major == "B")
discrim.B %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program B",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.C <- discrim %>%
filter(Major == "C")
discrim.B %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program C",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.C <- discrim %>%
filter(Major == "D")
discrim.B %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program D",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.C <- discrim %>%
filter(Major == "E")
discrim.B %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program E",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.C <- discrim %>%
filter(Major == "F")
discrim.F %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program F",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.F <- discrim %>%
filter(Major == "F")
discrim.F %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program F",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.E <- discrim %>%
filter(Major == "E")
discrim.E %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program E",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.D <- discrim %>%
filter(Major == "D")
discrim.D %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program D",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.C <- discrim %>%
filter(Major == "C")
discrim.C %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex, Segmented by Admission Status for Program C",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
moving %>%
ggplot(aes(x = Age))+
geom_boxplot() +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%  # Data set piped into...
ggplot(aes(y = Age, x = From))+  # Identify variables
geom_boxplot()+  # Tell it to make a box plot
labs(title = "Side by side box plot of age by state of origin",  # Title
x = "State of Origin",    # x-axis label
y = "Age")  # y-axis label
moving %>%
group_by(Age_Group) %>% count(From)
moving %>%
ggplot(aes(x = Age_Group, fill = From))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Age Group of Buyers, Segmented by State of Origin",
y = "Relative Frequency",
x = "Age Group") +
scale_fill_grey()
group_by(moving$Age_Group) %>% count(moving$From)
moving %>%
group_by(Age_Group) %>% count(From)
moving %>%
group_by(Age_Group) %>% count(From) %>% print(n=inf)
discrim.A <- discrim %>%
filter(Major == "A")
library(tidyverse)
library(mosaic)
discrim.A <- discrim %>%
filter(Major == "A")
discrim.A <- discrim %>%
filter(Major == "A")
discrim <- read.csv ("https://waf.cs.illinois.edu/discovery/berkeley.csv")
discrim %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.A <- discrim %>%
filter(Major == "A")
discrim.A %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program A",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.B <- discrim %>%
filter(Major == "B")
discrim.B %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program B",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.C <- discrim %>%
filter(Major == "C")
discrim.C %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program C",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.D <- discrim %>%
filter(Major == "D")
discrim.D %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program D",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.E <- discrim %>%
filter(Major == "E")
discrim.E %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program E",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.F <- discrim %>%
filter(Major == "F")
discrim.F %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program F",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
discrim.A <- discrim %>%
filter(Major == "A")
discrim.A %>%
ggplot(aes(x =Gender, fill = Admission))+
geom_bar(stat = "count", position = "fill") +
labs(title = "Segmented bar plot of Sex of Berkley Applicants \n by Admission Status for Program A",
y = "Relative Frequency",
x = "Sex") +
scale_fill_grey()
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving <- read.csv("data/moving_to_mt.csv")
moving <- read.csv("data/moving_to_mt.csv")
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
library(ggmosaic)
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = FALSE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Over30", "Under30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = FALSE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Under30", "Over30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = FALSE)) # Make figure color
moving$Age_Group <- factor(moving$Age_Group, levels = c("Under30", "Over30"))
moving %>% # Data set piped into...
ggplot() +   # This specifies the variables
geom_mosaic(aes(x=product(From), fill = Age_Group)) +  # Tell it to make a mosaic plot
labs(title = "Mosaic plot of State of Origin \n Segmented by Age Group",  # Make sure to title your plot
x = "State of Origin",   # Label the x axis
y = "") +  # Remove y axis label
scale_fill_grey(guide = guide_legend(reverse = TRUE)) # Make figure color
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 7) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 8) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 7) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6.5) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 7) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6.8) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 7) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6.5) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6.2) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 6.5) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 5) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 7) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 7.2) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving %>%
ggplot(aes(x = Age))+
geom_histogram(binwidth = 8) +
labs(title = "Histogram of Age of Buyers",
x = "Age",
y = "Count")
moving_to_mt <- read_excel("C:/Users/14064/Box/Stat 216 Curriculum/VideoPPT/moving_to_mt.xlsx")
library(readxl)
library(catstats)
moving_to_mt <- read_excel("C:/Users/14064/Box/Stat 216 Curriculum/VideoPPT/moving_to_mt.xlsx")
hw <-read.csv("data/husbands_wives_ht.csv")
paired_observed_plot(hw)
hw_diff %>%
summarise(favstats(ht_husband))
hw_diff <- hw %>%
select(ht_husband, ht_wife) %>%
mutate(ht_diff = ht_husband-ht_wife)
hw_diff %>%
summarise(favstats(ht_husband))
